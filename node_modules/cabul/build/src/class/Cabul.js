"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const endpoint_json_1 = require("../../endpoint.json");
const superagent_1 = require("superagent");
const popularity = ["hot", "top", "new", "controversial"];
/**
 * Cabul client
 * @export
 * @class Cabul
 */
class Cabul {
    /**
     * Creates an instance of Cabul.
     * @memberof Cabul
     */
    constructor() {
        this.baseURL = "https://scathach.redsplit.org/v4/reddit_cabul/?s=";
        this.fetch = superagent_1.get;
    }
    /**
     * @param {String} type The related hentai endpoint
     * @param {String} sortby Must be following: "hot" | "new" | "top" | "controversial"
     * @param {Boolean} no_random If true, will return 25 items instead of 1 random. Default is false.
     */
    async hentai(type, sortby, no_random) {
        if (!type)
            throw new Error("Type must given");
        if (!endpoint_json_1.hentai[type])
            throw new ReferenceError("No results. Make sure you spelled everything right.");
        if (no_random && typeof no_random !== "boolean")
            throw new TypeError("Third parameter must be a boolean");
        if (!sortby)
            sortby = popularity[Math.floor(Math.random() * popularity.length)];
        if (sortby !== sortby.toLowerCase())
            sortby = sortby.toLowerCase();
        if (!["top", "new", "hot", "controversial"].includes(sortby))
            throw new ReferenceError("Sort must be one of the following: top, new, hot, controversial");
        try {
            const { body } = await (0, superagent_1.get)(this.baseURL + endpoint_json_1.hentai[type] + "&sort=" + sortby + "&get_25_item=" + no_random);
            if (!body)
                throw new Error("No results. Probably related subreddit is currently banned or private only");
            return body;
        }
        catch (e) {
            throw new Error(e);
        }
    }
    /**
    * @param {String} type The related irl endpoint
    * @param {String} sortby Must be following: "hot" | "new" | "top" | "controversial"
    * @param {Boolean} no_random If true, will return 25 items instead of 1 random. Default is false.
    */
    async irl(type, sortby, no_random) {
        if (!type)
            throw new Error("Type must given");
        if (!endpoint_json_1.irl[type])
            throw new ReferenceError("No results. Make sure you spelled everything right.");
        if (no_random && typeof no_random !== "boolean")
            throw new TypeError("Third parameter must be a boolean");
        if (!sortby)
            sortby = popularity[Math.floor(Math.random() * popularity.length)];
        if (sortby !== sortby.toLowerCase())
            sortby = sortby.toLowerCase();
        if (!endpoint_json_1.irl[type])
            throw new ReferenceError("No results. Make sure you spelled everything right.");
        if (!["top", "new", "hot", "controversial"].includes(sortby))
            throw new ReferenceError("Sort must be one of the following: top, new, hot, controversial");
        try {
            const { body } = await (0, superagent_1.get)(this.baseURL + endpoint_json_1.irl[type] + "&sort=" + sortby + "&get_25_item=" + no_random);
            if (!body)
                throw new Error("No results. Probably related subreddit is currently banned or private only");
            return body;
        }
        catch (e) {
            throw new Error(e);
        }
    }
    /**
    * @param {String} type The related meme endpoint
    * @param {String} sortby Must be following: "hot" | "new" | "top" | "controversial"
    * @param {Boolean} no_random If true, will return 25 items instead of 1 random. Default is false.
    */
    async meme(type, sortby, no_random) {
        if (!type)
            throw new Error("Type must given");
        if (!endpoint_json_1.meme[type])
            throw new ReferenceError("No results. Make sure you spelled everything right.");
        if (no_random && typeof no_random !== "boolean")
            throw new TypeError("Third parameter must be a boolean");
        if (!sortby)
            sortby = popularity[Math.floor(Math.random() * popularity.length)];
        if (sortby !== sortby.toLowerCase())
            sortby = sortby.toLowerCase();
        if (!endpoint_json_1.meme[type])
            throw new ReferenceError("No results. Make sure you spelled everything right.");
        if (!["top", "new", "hot", "controversial"].includes(sortby))
            throw new ReferenceError("Sort must be one of the following: top, new, hot, controversial");
        try {
            const { body } = await (0, superagent_1.get)(this.baseURL + endpoint_json_1.meme[type] + "&sort=" + sortby + "&get_25_item=" + no_random);
            if (!body)
                throw new Error("No results. Probably related subreddit is currently banned or private only");
            return body;
        }
        catch (e) {
            throw new Error(e);
        }
    }
}
exports.default = Cabul;
